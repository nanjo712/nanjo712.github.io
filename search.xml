<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>std::chrono用法解析</title>
    <url>/2024/01/27/std-chrono%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p><code>std::chrono</code>是C++11引入的一个全新的有关时间处理的库。</p>
<p>新标准以前的C++往往会使用定义在<code>ctime</code>头文件中的C-Style时间库<code>std::time</code>。</p>
<p>相较于旧的库，<code>std::chrono</code>完善地定义了时间段（duration）、时钟（clock）和时间点（time
point）三个概念，并且给出了对多种时间单位的支持，提供了更高的计时精度、更友好的单位处理以及更方便的算术操作（以及更好的类型安全）。</p>
<span id="more"></span>
<p>下面，我们将逐步说明<code>std::chrono</code>用法。</p>
<p>Tips：本文参考的库代码主要来自MSVC，少部分来自GCC</p>
<h2 id="chrono库概念与相关用法">chrono库概念与相关用法</h2>
<h3 id="时间段duration">时间段（duration）</h3>
<p>时间段被定义为<code>std::chrono::duration</code>，表示一段时间。</p>
<p>它的签名如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Rep</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Period</span> = std::ratio&lt;<span class="number">1</span>&gt;</span><br><span class="line">&gt; <span class="keyword">class</span> duration;</span><br></pre></td></tr></table></figure>
<p><code>Rep</code>是一个算术类型，表示tick数的类型，笔者一般会将其定义为<code>int</code>或者<code>long long</code>等整数类型，当然浮点数类型也是可行的。</p>
<p><code>Period</code>代表tick的计数周期，它具有一个默认值——以一秒为周期，即
<span class="math inline">\(1\)</span> <span
class="math inline">\(\mathrm{tick}/\mathrm{s}\)</span>。单位需要自行指定的情况会在后面涉及，这里暂时不讨论。</p>
<p>简单来说，我们可以认为一个未指定<code>Period</code>的<code>duration</code>是一个以秒为单位的时间段。</p>
<p>一个简单的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="function">chrono::duration&lt;<span class="type">int</span>&gt; <span class="title">dur</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::seconds&gt;</span><br><span class="line">                (std::chrono::steady_clock::<span class="built_in">now</span>())</span><br><span class="line">                .<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>() &lt;&lt; std::endl; <span class="comment">// 以秒为单位输出当前时间</span></span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(dur);</span><br><span class="line">    std::cout &lt;&lt; std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::seconds&gt;</span><br><span class="line">                (std::chrono::steady_clock::<span class="built_in">now</span>())</span><br><span class="line">                .<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>() &lt;&lt; std::endl; <span class="comment">// 以秒为单位输出当前时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的作用是输出当前时间，随后睡眠两秒，再输出当前时间。<code>dur</code>描述了一个2秒的时间间隔。</p>
<p><code>duration</code>支持几乎所有的算术运算。通俗地说，你可以对两个<code>duration</code>做加减运算，也可以对某个<code>duration</code>做数乘运算。</p>
<h4 id="时间单位">时间单位</h4>
<p>一般地，在未经特殊指定的情况下，我们认为C++以秒为默认单位。</p>
<p>为了方便地引入其他单位，我们会使用<code>std::ratio</code>，有关它的具体行为可以参考<a
href="https://en.cppreference.com/w/cpp/numeric/ratio/ratio">std::ratio
Documentation</a>。在这篇文章中，我们只需要知道它是一个表示常数比例的类型，并且它是一个编译期常量。</p>
<p>下表给出了一些SI单位制中常用的比例，C++的标准库提供了这些比例的语法糖。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240126001319598.png"
alt="image-20240126001319598" />
<figcaption aria-hidden="true">image-20240126001319598</figcaption>
</figure>
<p>基于这份比例表，C++标准库为我们常用的时间单位提供了一些语法糖</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240126002441567.png"
alt="image-20240126002441567" />
<figcaption aria-hidden="true">image-20240126002441567</figcaption>
</figure>
<p>笔者在这里简单翻译一下图中的文字说明：</p>
<blockquote>
<p>int XX是指这个类型的tick数类型是一个至少具有XX位的有符号整数</p>
<p>到hours为止每个预定义类型至少可以覆盖±292年。</p>
<p>C++20中引入的days、weeks、months和years的单位至少可以覆盖±40000年。一年被定义为365.2425天（格里高利年的平均长度），一月被定义为30.436875天（一年的十二分之一）。</p>
</blockquote>
<p>定义在<code>std::chrono</code>的时间单位事实上是一个<code>duration</code>，描述一个时间段。因此我们容易见得：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::<span class="function">chrono::duration&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dur1</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">std::<span class="function">chrono::seconds <span class="title">dur2</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这一段代码中的<code>dur1</code>和<code>dur2</code>应该是等价的。</p>
<p>为了简化使用并且增强可读性，在没有特殊单位需求的情况下，笔者建议使用第二种方式定义时间段。</p>
<p>当然，引入<code>std::ratio</code>为我们自定义时间单位带来了可能性。</p>
<p>一个例子：</p>
<p>现在， 出于一种不可明说理由，我们引入了一个新的时间单位，记作<span
class="math inline">\(\mathrm{A}\)</span>，其中<span
class="math inline">\(1\mathrm{A}=500\mathrm{ms}\)</span>。为了描述使用这个单位记录的<code>duration</code>，我们可以这样定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::duration&lt;<span class="type">long</span> <span class="type">long</span>,std::ratio&lt;<span class="number">1</span>,<span class="number">2</span>&gt;&gt; dur; <span class="comment">// 1/2s=0.5s=500ms</span></span><br></pre></td></tr></table></figure>
<p>这样就实现了自定义单位的需求。</p>
<p>当然，<code>duration</code>的单位转换也是支持的，只需要使用<code>duration_cast</code>即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::nanoseconds&gt;(dur)</span><br></pre></td></tr></table></figure>
<p>这个表达式将返回一个新的<code>duration</code>，时间长度保持一致，但是其单位将会是纳秒。</p>
<h3 id="时钟clock">时钟（clock）</h3>
<p>时钟由两部分构成，分别是起始点（starting point or
epoch）和计时频率（tick rate）。</p>
<p>一个简单的例子是Unix时间戳，我们可以将其视为一个起点为1970年1月1日，计时频率为
<span class="math inline">\(1\)</span> Hz（ <span
class="math inline">\(1\)</span> tick/s）的时钟。</p>
<p>C++11中提供了三种时钟，包括system_clock、steady_clock、high_resolution_clock.
这些时钟的now方法均会返回当前的时间点（time
point），即从起始点开始的tick数。</p>
<p><em>注意，这三个时钟都不会考虑闰秒，我们会暂时略过相关内容的讨论，在必要时我们会简要说明不考虑闰秒的原因</em></p>
<h4 id="system_clock">system_clock</h4>
<p>顾名思义，这是一个系统时钟，表示操作系统的实时时间。</p>
<p>需要注意的是，这个时钟的单调性是不被保证的。原因是显而易见的：用户或者系统可以在任何时候出于任何理由（夏令时调整、时区调整等）改变系统时间。因此它实际上表示了现实世界的时钟（wall
clock，墙上时钟），这个时钟很适合直接记录和计划与现实时间直接相关的任务。</p>
<p>需要注意的是，C++20以前的标准并没有具体规定system_clock的实现。但是，多数system_clock的实现都使用Unix时间。</p>
<p>不过，在C++20之后，system_clock的实现就被规定为Unix时间了。</p>
<p>另外，这是唯一一个可以和C风格的<code>std::time</code>的时间戳构成双射的时钟，因此<code>std::chrono</code>中提供了<code>to time_t</code>和<code>from time_t</code>两个方法。</p>
<h4 id="steady_clock">steady_clock</h4>
<p>这一时钟与system_clock最大的不同就是单调性。system_clock由于直接与现实时间相关联，因此单调性无法保证。但是steady_clock是一个稳定的时钟源，它的now方法返回的时间总是单调递增的，并且每个tick之间的时间差总是一个常数。</p>
<p>一个值得注意的地方是，这个时钟的计时起点是未指定的。</p>
<blockquote>
<p>This clock is not related to wall clock time (for example, it can be
time since last reboot), and is most suitable for measuring
intervals.</p>
<p align="right">
From
<a href="https://en.cppreference.com/w/cpp/chrono/steady_clock">std::chrono::steady_clock</a>
</p>
</blockquote>
<p>这样的设计是有意而为之的——这一时钟并不被设计在表示日历时间的场景中使用。如上方所说，这一时钟最合适的用途是用于测量时间间隔（作为定时器的时钟源）。</p>
<h4 id="high_resolution_clock">high_resolution_clock</h4>
<p>这一时钟是当前平台分辨率最高的时钟，其实际精度和分辨率一般取决于具体的平台。事实上，在大多数的实现中，这一时钟只是system_clock和steady_clock的别名——因此其单调性也几乎无法保证。</p>
<p>截至笔者完成本文的时间GCC的标准库libstdc++中high_resolution_clock是system_clock的别名，而MSVC的标准库中high_resolution_clock是steady_clock的别名，LLVM的标准库libc++对这一时钟的定义则是两者的复合体——在具有单调时钟时使用steady_clock，否则使用system_clock。</p>
<p>如果你的程序中使用了这个时钟并且有跨平台的需求，这将带来程序行为不一致的风险。</p>
<p>除非你认为非常有必要，否则我们建议减少对这个时钟的使用。</p>
<h4 id="为什么不讨论闰秒">为什么不讨论闰秒？</h4>
<p><strong>如果你不关心这个问题，你可以跳过这一段。</strong></p>
<p>在前面提到过，这样的设计是有意而为之。因为闰秒并不像我们所说的闰年一样，具有一个可计算的公式。</p>
<p>如果将地球自转一周的时间均分为86400份，将一份定义为一秒，我们就得到了秒的一种定义，根据这种秒的定义所得到的时间我们记为<strong>世界时UT1</strong>。</p>
<p>但是地球自转一周的时间是不稳定的，这一点不展开讨论，我们只需要知道它是客观存在的。因此，我们需要更稳定的秒的定义——铯-133原子基态的两个超精细结构能级之间跃迁相对应辐射周期的9192631770倍所持续的时间定义为一秒。由这种方法计量的时间我们记为<strong>原子时TAI</strong>。</p>
<p>世界时是符合人类直观，具有直接指导生产意义的时间，但是具有不稳定性。原子时稳定，但是由于地球自转的不稳定性，会与世界时形成不小的误差。</p>
<p>为了弥补这个误差，我们引入一种新的时间，也就是我们现在常用的时间——<strong>协调世界时UTC</strong>。</p>
<p>它以TAI为基础，为了避免误差累积，每当UTC和UT1的误差接近1秒时，就会插入闰秒以修补这个误差。但是插入的时间并不确定，事实上，它由对应的国际组织提前六个月发布处理。</p>
<p>作为一个编程语言，C++不具备预测人类活动或者地球自转快慢的能力，因此不考虑闰秒是一个正常的选择。这个问题被交给程序员来解决。</p>
<p><em>截至目前，由于插入闰秒的做法带来了很多破坏性的影响，已有提案声明要求取消闰秒。预计在2035年后，不再引入新的闰秒。</em></p>
<h3 id="时间点time_point">时间点（time_point)</h3>
<p>时间点的意义是自然的，它代表时间轴上的一个点。为了定义它，你需要提供一个时钟作为参考系，一个tick数标记这个<code>time_point</code>代表的点。一般的实现是作为一个特殊的<code>duration</code>，简单来说，它是一个起点固定的<code>duration</code>（固定为指定时钟的起始点）。因此，它的构造方法就是提供一个时钟，并且提供一个<code>duration</code>代表具体时钟起点的长度。</p>
<p><em>当然这不意味着这两个类具有继承关系。事实上，这是一种帮助理解的说法。</em></p>
<p>它的签名如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Clock</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Duration</span> = <span class="keyword">typename</span> Clock::duration</span><br><span class="line">&gt; <span class="keyword">class</span> time_point;</span><br></pre></td></tr></table></figure>
<p>一个简单的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::<span class="function">chrono::time_point&lt;std::chrono::system_clock&gt; </span></span><br><span class="line"><span class="function">    <span class="title">start</span><span class="params">(std::chrono::duration&lt;<span class="type">int</span>&gt;(<span class="number">10</span>))</span></span>;</span><br></pre></td></tr></table></figure>
<p>这段代码定义了一个名为<code>start</code>的时间点，标记了1970年1月1日0时0分10秒（Unix时间起点+10s）的时间点。</p>
<p>可以这样看，我们提供了<code>system_clock</code>作为模板参数，这代表着这个时间点以<code>system_clock</code>为参考系，我们传入一个长度为10s的<code>duration</code>表示我们需要标记system_clock纪元（epoch）10秒后的一个点。</p>
<p>当然，也有这样的定义方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::chrono::<span class="function">system_clock::time_point <span class="title">start</span><span class="params">(std::chrono::duration&lt;<span class="type">int</span>&gt;(<span class="number">10</span>))</span></span>;</span><br></pre></td></tr></table></figure>
<p>这两者是等价的。</p>
<p>因为<code>time_point</code>是特殊的<code>duration</code>，因此它也可以进行一些算术操作。</p>
<p>值得注意的是，由于<code>time_point</code>的实际含义是一个点，对一个点的数乘是无意义的，所以<code>time_point</code>并不能支持数乘运算。</p>
<p>其他的加减操作是符合直观的，概括地说：</p>
<ul>
<li>时间点和时间段相加减得到新的时间点。</li>
<li>时间点与时间点相减得到新的时间段。</li>
</ul>
<p>自然地，<code>time_point</code>也是可以进行单位转换的，只要类比<code>duration_cast</code>的用法，使用<code>time_point_cast</code>即可。</p>
<h2
id="简化的表示chrono_literals的使用">简化的表示——chrono_literals的使用</h2>
<p><code>chrono_literals</code>是<code>std::literals</code>的一个子命名空间，引入这个命名空间之后我们可以简化时间的表示。</p>
<p>一个例子是：我们可以用<code>10s</code>等价代替<code>std::chrono::seconds(10)</code>。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240127222748419.png"
alt="image-20240127222748419" />
<figcaption aria-hidden="true">image-20240127222748419</figcaption>
</figure>
<p>C++认为<code>10s</code>是一个字面量（literal），代表<code>std::chrono::seconds(10)</code>，正如一个不带后缀的字面量<code>10</code>代表一个int类型的整数10一样。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::literals::chrono_literals;</span><br><span class="line">std::chrono::<span class="function">system_clock::time_point <span class="title">start</span><span class="params">(<span class="number">10</span>s)</span></span>;</span><br></pre></td></tr></table></figure>
<p>于是，我们有了这样更加直观的写法。</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://en.cppreference.com/w/cpp/chrono">Date and time
utilities - cppreference.com</a></p>
<p><a href="https://zh.wikipedia.org/wiki/闰秒">闰秒 -
维基百科，自由的百科全书 (wikipedia.org)</a></p>
]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>四舵轮底盘运动解算</title>
    <url>/2024/01/17/%E5%9B%9B%E8%88%B5%E8%BD%AE%E5%BA%95%E7%9B%98%E8%BF%90%E5%8A%A8%E8%A7%A3%E7%AE%97/</url>
    <content><![CDATA[<p>舵轮具备向任意方向产生速度的能力，因此舵轮底盘可以进行全向运动。</p>
<span id="more"></span>
<p>定义底盘坐标系如下，x为正前方，原点为底盘中心。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240117042607140.png"
alt="image-20240117042607140" />
<figcaption aria-hidden="true">image-20240117042607140</figcaption>
</figure>
<p>底盘的运动状态可以表示为 <span class="math display">\[
\boldsymbol{V}=\begin{bmatrix} \vec{v}&amp; \vec{\omega}\end{bmatrix}
\]</span> 其中<span class="math inline">\(v\)</span>表示底盘在<span
class="math inline">\(X-Y\)</span>平面的线速度，<span
class="math inline">\(\omega\)</span>表示底盘绕自身中心自转的角速度。</p>
<p>令<span
class="math inline">\(\theta=\arctan(\frac{l}{w})\)</span>，<span
class="math inline">\(\vec{r_i}\)</span>为车体中心指向轮子中心的向量，<span
class="math inline">\(|\vec{r_i}|=\frac{\sqrt{l^2+w^2}}{2}\)</span></p>
<p>我们将角速度<span
class="math inline">\(\omega\)</span>映射到四个轮子上，于是有 <span
class="math display">\[
\vec{v_{\omega i}}=\vec{\omega}\times
\vec{r_i}=|\vec\omega||\vec{r_i}|(\cos(\theta_i),sin(\theta_i))
\]</span> 其中 <span class="math display">\[
\begin{bmatrix}
\theta_1\\
\theta_2\\
\theta_3\\
\theta_4
\end{bmatrix}=
\begin{bmatrix}
\pi-\theta\\
\theta-\pi\\
-\theta\\
\theta
\end{bmatrix}
\]</span></p>
<p>将线速度<span
class="math inline">\(v\)</span>映射到四个轮子上，于是有 <span
class="math display">\[
\vec{v_{li}}=\vec{v}=\begin{bmatrix}v_x\\v_y\end{bmatrix}
\]</span> 把线速度的投影和角速度的投影相加，得到 <span
class="math display">\[
\vec{v_{i}}=\vec{v_{li}}+\vec{v_{\omega i}}
\]</span> 于是我们有 <span class="math display">\[
\vec{v_i}=\begin{bmatrix}
1 &amp; 0 &amp; |r|\cos(\theta_i)\\
0 &amp; 1 &amp; |r|\sin(\theta_i)
\end{bmatrix}
\begin{bmatrix}
v_x\\
v_y\\
\omega
\end{bmatrix}
\]</span></p>
<p>将所得的矢量的模作为舵轮的速度，矢量的方向作为舵轮的方向即可。</p>
]]></content>
      <tags>
        <tag>机器人运动学</tag>
      </tags>
  </entry>
  <entry>
    <title>《常轨脱离Creative》——天使降临我身边</title>
    <url>/2024/02/25/%E3%80%8A%E5%B8%B8%E8%BD%A8%E8%84%B1%E7%A6%BBCreative%E3%80%8B%E2%80%94%E2%80%94%E5%A4%A9%E4%BD%BF%E9%99%8D%E4%B8%B4%E6%88%91%E8%BA%AB%E8%BE%B9/</url>
    <content><![CDATA[<p>我对GalGame的接触不多，并不能算是圈子中的资深玩家——没有玩过几部经典的作品，仅有的游玩经验也只有《美少女万华镜》、《恋爱我就借走了》等一些比较有名的作品浅尝辄止的体验。</p>
<p>第一次听说《常轨脱离》是在知乎上的某个回答中，看到了一张妃爱的游戏CG。初看觉得非常惊艳，于是上网搜索了一会，最后在春节Steam打折时入了本作，并且开始了游玩。</p>
<p>既然是为了妃爱而来，自然首先选择了妃爱线。不过，在体验共通线的过程中，我却对娇小可爱的锦明日海产生了兴趣。于是在结束了妃爱线后，我头一次在GalGame中尝试了第二条线路——之前的游玩经验中，不知出于何种原因，我都只推了一条线就没有再玩了。凭借着自己的感觉，很成功地进入了锦明日海的个人线，充实地体验了剧情后，达成了结局”天使降临我身边“。<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225213231159.png"
alt="image-20240225213231159" /></p>
<p>可以说，本线的剧情很好地击穿了我内心的防波堤，也因此我提笔写下这篇文章，记录本人游玩的感想。</p>
<p>个人文笔比较差，请读者见谅。</p>
<span id="more"></span>
<p><strong><em>以下部分涉及剧透</em></strong></p>
<h2 id="个人线剧情梗概">个人线剧情梗概</h2>
<p>提笔之时，我已通关有些日子，多数剧情仅仅依赖自己的记忆，可能稍微有些不准确。</p>
<p>共通线主要的内容是莫名其妙被选为学生会长的和泉不得不集结了一批不上学的学生作为自己的学生会成员，并且经过一系列日常活动之后，逐步建立起良好的关系。</p>
<p>在经过了学生会一段时间的活动后，和泉智宏（以下称和泉，妹妹会用妃爱代替）已经和成员们建立了良好的关系。结束了志愿者合宿之后，家里蹲的和泉突然接到锦明日海（以下称明日海）的求助信息，几乎没有任何犹豫，他即刻动身前往明日海家。锦明日海的个人线由此开始。</p>
<p>到明日海家后，和泉得知是直播平台封禁了雪景四季（锦明日海的VTuber账号）的直播间，在联系运营之后尽管并不知道触犯了什么规则，但是得知需要一段时间才能解封。为了保障雪景四季的人气，和泉与明日海商讨决定要用视频的形式代替直播，作为直播间封禁期间的过渡活动。</p>
<p>除此之外，和泉还得知明日海收到V字势公司（以下简称V司）邀请。二人讨论后，认为如果有专业的公司运营和宣传渠道，不仅可以减少类似这次的封禁事件，也可以取得更多的资源。因此明日海决定与V司合作。</p>
<p>为了帮助明日海，这一段时间里和泉常常到明日海家中帮忙。在这一过程中，二人的感情迅速升温，最后以明日海的告白开始，二人正式成为恋人。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225214851024.png"
alt="忘了截图了，拿一张CG将就看一下" />
<figcaption
aria-hidden="true">忘了截图了，拿一张CG将就看一下</figcaption>
</figure>
<p>在接下来的相处中，明日海不断打开自己内心的防线，逐渐把自己的过去和盘托出。</p>
<p>明日海的父母均为有名的音乐家，在这种环境下出生的她爱上了歌唱，但是因为意外的受伤导致喉咙受损，需要休养一段时间，不能唱歌。由于她从小在音乐学校就读，不能唱歌意味着需要落下很多进度，而且也因为不能唱歌而遭人白眼。同龄人的目光刺激到了明日海，她为了证明自己而逞强，强行在喉咙未康复的情况下唱歌，反而导致进一步损伤，因此需要更长时间来治疗，这导致她不得不落下更多的进度。在老师同学和父母的压力下，明日海选择了退学，在休息了一段时间后，转到普通学校就读。</p>
<p>转到普通学校后，意外又发生了。在一次合唱活动的练习中，她一开口就不小心走音了，因此被同班的男同学嘲笑。自己最喜爱也最为之骄傲的唱歌遭遇了挫折，最终得到了他人的嘲笑。作为音乐家之女的她在歌唱上的屡次失败导致了明日海的彻底破防，因此不敢去上学，不再敢在大众面前以锦明日海的身份唱歌，成为了一个完全的家里蹲。</p>
<p>但是她仍然没有放弃对唱歌的喜爱，她没有勇气以锦明日海的身份唱歌，她选择自己作曲，使用虚拟歌姬的技术来代替她发声。出生于音乐之家的她自然有着极高的音乐天赋，她作的曲子取得了很大的成就。尽管如此，她仍然希望能够自己唱歌。于是，她委托常盘华乃为自己设计了雪景四季的身份，作为一名虚拟主播开始活动。</p>
<p>摆脱了音乐家之女锦明日海的身份带来的压力，加上网络为她戴上的面具”雪景四季“，她可以无忧无虑地唱歌了。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225222822800.png"
alt="雪景四季" />
<figcaption aria-hidden="true">雪景四季</figcaption>
</figure>
<p>当然，这只是逃避现实的一种权宜之计。</p>
<p>在学生会任期中的最后一项任务文化祭中，学生会需要拿出振奋人心的节目（共通线中镰仓埋的坑）。明日海为了帮助和泉，也希望以此为契机解决自己心中的阴影，提出让自己上台唱歌。囿于过去的阴影，明日海虽有犹豫，但是在和泉的鼓励下，也下定了决心。</p>
<p>好事总是成双成对。雪景四季的出道演出被V司安排在了VTB的一场盛会——V冲击波（什么b翻译）中进行，运营小姐告知演出时间在文化祭的表演后一天。这是很好的机会，和泉和明日海自然答应了下来。</p>
<p>在文化祭的最后的布置工作结束时，V司公告的雪景四季将在V冲击波进行首次亮相，但是公告的日期却并不是运营小姐当初告知的时间，而是文化祭表演的那一天。</p>
<p>运营小姐为自己的工作失误道歉，并且表示愿意为此负责。众人思索许久，在最终几乎要决定放弃文化祭表演而选择V冲击波时，和泉”奇迹般地“想到了一个方法通过远程直播实现明日海在文化祭表演的同时也进行V冲击波的演出——让明日海穿上特制的衣服，遮盖住身上的动捕传感器，通过网络远程传输动捕数据到V冲击波的会场进行表演。（有关中之人暴露的问题游戏中有提及，与主题关系不大，不过多赘述）</p>
<p>最终，锦明日海圆满完成了两场表演，实现了个人的成长与蜕变。</p>
<p>明日海在最终的表演中发表了自己的感想，呼应了游戏的主题”不上学“。事实上，所有的线最后都会有这样一段剧情，不过我个人认为，这一段明日海的自白是对主题的契合度是最自然和贴切的。</p>
<blockquote>
<p>”很高兴今天大家能这么热情！现在能站在这里，像这样和大家打着招呼，我很开心！“</p>
<p>”这次的曲子是我自己所作！“</p>
<p>”我原本是个家里蹲，但是有人告诉了我，偶尔出去转转也不是件坏事。“</p>
<p>”当我鼓起勇气踏出那一步之后，真的，感觉很不错。“</p>
<p>”所以，我想把自己这份感受，也传递给各位，将这份心情，承载在歌声上。“</p>
<p>”如果大家对听了我的歌之后，对外面的世界产生了兴趣，从而迈出了那一步，我会特别开心。“</p>
<p>”外面的世界，其实并不坏。“</p>
<p>”正是因为踏出了那一步，才有了现在的我自己。“</p>
<p>”十分荣幸，大家能来听我唱歌，再次感谢各位！“</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225225517881.png"
alt="image-20240225225517881" />
<figcaption aria-hidden="true">image-20240225225517881</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225225718591.png"
alt="image-20240225225718591" />
<figcaption aria-hidden="true">image-20240225225718591</figcaption>
</figure>
<h2 id="个人感受">个人感受</h2>
<p>之后就是一些碎碎念了。</p>
<p>玩完明日海线，我感受到的应该是是淡淡的快乐和无尽的憧憬。</p>
<p>全线聚焦于明日海个人的成长，基本的矛盾在于因为各种压力而导致自己无法上台歌唱，尽管有雪景四季作为另一重身份让她在网络上活动，但是对于有音乐梦想的她来说，以锦明日海的身份上台歌唱才是她最期盼的，在和泉的鼓励下，明日海在文化祭上迈出了重要一步，最终实现了个人的成长。</p>
<p>当然，恋爱游戏自然要谈一谈恋爱了。</p>
<p>概括地说，这是一场纯粹又简单、一场普通又美好的恋爱。</p>
<p>本线的一个重要意象就是肉包。它象征着二人的感情，组织起了全线的剧情——肉包贯穿了他们的相识，相恋，相爱，甚至在我的幻想中即使到了二人白头偕老之时，他们依然会分着吃便利店的肉包。</p>
<p>比起妃爱线的背德和华乃线的刺激，明日海线更像是平淡的清水，因肉包而起的相遇，因学生会产生的羁绊，最后水到渠成，顺理成章地结为伴侣。和泉始终支持着明日海，克服种种困难，明日海摆脱心中的挂碍，成功在舞台上放声歌唱，二者的感情由此升华。</p>
<p>不过，这一条线也并非完美无缺。</p>
<p>从剧本来看，后期文化祭与V冲击波表演冲突的这一矛盾的设置并不算太优秀。</p>
<p>这一冲突的出现是合理的，为了避免情节的平铺直叙，明日海的成长中的阻碍不应只有过去的阴霾，也应该有现实的，眼前的障碍，否则紧张感没有现实的凭依，仅仅依赖对明日海的共情，并不能很好地调动玩家的情绪，运营小姐从合作之初就经常在小地方上失误，契合人物形象，也为这一冲突埋下了伏笔，对于这一点我是认可的。</p>
<p>但是这一冲突的设计却不好，其原因在于解决方法太过浅显了。这样的解决方案可行性太差了，以至于我实在无法认可。</p>
<p>当然，也许实现不可能也算得上是一种常轨脱离吧。</p>
<p>总的来说，从剧情的角度，满分10分，我愿意为这一条线打9分。</p>
<p><strong>从涩涩的角度来说，我给2147483647分！锦小姐真是太可爱了！</strong></p>
]]></content>
      <tags>
        <tag>GalGame</tag>
      </tags>
  </entry>
</search>
