<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>std::chrono用法解析</title>
    <url>/2024/01/27/std-chrono%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p><code>std::chrono</code>是C++11引入的一个全新的有关时间处理的库。</p>
<p>新标准以前的C++往往会使用定义在<code>ctime</code>头文件中的C-Style时间库<code>std::time</code>。</p>
<p>相较于旧的库，<code>std::chrono</code>完善地定义了时间段（duration）、时钟（clock）和时间点（time
point）三个概念，并且给出了对多种时间单位的支持，提供了更高的计时精度、更友好的单位处理以及更方便的算术操作（以及更好的类型安全）。</p>
<span id="more"></span>
<p>下面，我们将逐步说明<code>std::chrono</code>用法。</p>
<p>Tips：本文参考的库代码主要来自MSVC，少部分来自GCC</p>
<h2 id="chrono库概念与相关用法">chrono库概念与相关用法</h2>
<h3 id="时间段duration">时间段（duration）</h3>
<p>时间段被定义为<code>std::chrono::duration</code>，表示一段时间。</p>
<p>它的签名如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Rep</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Period</span> = std::ratio&lt;<span class="number">1</span>&gt;</span><br><span class="line">&gt; <span class="keyword">class</span> duration;</span><br></pre></td></tr></table></figure>
<p><code>Rep</code>是一个算术类型，表示tick数的类型，笔者一般会将其定义为<code>int</code>或者<code>long long</code>等整数类型，当然浮点数类型也是可行的。</p>
<p><code>Period</code>代表tick的计数周期，它具有一个默认值——以一秒为周期，即
<span class="math inline">\(1\)</span> <span
class="math inline">\(\mathrm{tick}/\mathrm{s}\)</span>。单位需要自行指定的情况会在后面涉及，这里暂时不讨论。</p>
<p>简单来说，我们可以认为一个未指定<code>Period</code>的<code>duration</code>是一个以秒为单位的时间段。</p>
<p>一个简单的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::<span class="function">chrono::duration&lt;<span class="type">int</span>&gt; <span class="title">dur</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">    std::cout &lt;&lt; std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::seconds&gt;</span><br><span class="line">                (std::chrono::steady_clock::<span class="built_in">now</span>())</span><br><span class="line">                .<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>() &lt;&lt; std::endl; <span class="comment">// 以秒为单位输出当前时间</span></span><br><span class="line">    std::this_thread::<span class="built_in">sleep_for</span>(dur);</span><br><span class="line">    std::cout &lt;&lt; std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::seconds&gt;</span><br><span class="line">                (std::chrono::steady_clock::<span class="built_in">now</span>())</span><br><span class="line">                .<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>() &lt;&lt; std::endl; <span class="comment">// 以秒为单位输出当前时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的作用是输出当前时间，随后睡眠两秒，再输出当前时间。<code>dur</code>描述了一个2秒的时间间隔。</p>
<p><code>duration</code>支持几乎所有的算术运算。通俗地说，你可以对两个<code>duration</code>做加减运算，也可以对某个<code>duration</code>做数乘运算。</p>
<h4 id="时间单位">时间单位</h4>
<p>一般地，在未经特殊指定的情况下，我们认为C++以秒为默认单位。</p>
<p>为了方便地引入其他单位，我们会使用<code>std::ratio</code>，有关它的具体行为可以参考<a
href="https://en.cppreference.com/w/cpp/numeric/ratio/ratio">std::ratio
Documentation</a>。在这篇文章中，我们只需要知道它是一个表示常数比例的类型，并且它是一个编译期常量。</p>
<p>下表给出了一些SI单位制中常用的比例，C++的标准库提供了这些比例的语法糖。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240126001319598.png"
alt="image-20240126001319598" />
<figcaption aria-hidden="true">image-20240126001319598</figcaption>
</figure>
<p>基于这份比例表，C++标准库为我们常用的时间单位提供了一些语法糖</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240126002441567.png"
alt="image-20240126002441567" />
<figcaption aria-hidden="true">image-20240126002441567</figcaption>
</figure>
<p>笔者在这里简单翻译一下图中的文字说明：</p>
<blockquote>
<p>int XX是指这个类型的tick数类型是一个至少具有XX位的有符号整数</p>
<p>到hours为止每个预定义类型至少可以覆盖±292年。</p>
<p>C++20中引入的days、weeks、months和years的单位至少可以覆盖±40000年。一年被定义为365.2425天（格里高利年的平均长度），一月被定义为30.436875天（一年的十二分之一）。</p>
</blockquote>
<p>定义在<code>std::chrono</code>的时间单位事实上是一个<code>duration</code>，描述一个时间段。因此我们容易见得：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::<span class="function">chrono::duration&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">dur1</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line">std::<span class="function">chrono::seconds <span class="title">dur2</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br></pre></td></tr></table></figure>
<p>这一段代码中的<code>dur1</code>和<code>dur2</code>应该是等价的。</p>
<p>为了简化使用并且增强可读性，在没有特殊单位需求的情况下，笔者建议使用第二种方式定义时间段。</p>
<p>当然，引入<code>std::ratio</code>为我们自定义时间单位带来了可能性。</p>
<p>一个例子：</p>
<p>现在， 出于一种不可明说理由，我们引入了一个新的时间单位，记作<span
class="math inline">\(\mathrm{A}\)</span>，其中<span
class="math inline">\(1\mathrm{A}=500\mathrm{ms}\)</span>。为了描述使用这个单位记录的<code>duration</code>，我们可以这样定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::duration&lt;<span class="type">long</span> <span class="type">long</span>,std::ratio&lt;<span class="number">1</span>,<span class="number">2</span>&gt;&gt; dur; <span class="comment">// 1/2s=0.5s=500ms</span></span><br></pre></td></tr></table></figure>
<p>这样就实现了自定义单位的需求。</p>
<p>当然，<code>duration</code>的单位转换也是支持的，只需要使用<code>duration_cast</code>即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::nanoseconds&gt;(dur)</span><br></pre></td></tr></table></figure>
<p>这个表达式将返回一个新的<code>duration</code>，时间长度保持一致，但是其单位将会是纳秒。</p>
<h3 id="时钟clock">时钟（clock）</h3>
<p>时钟由两部分构成，分别是起始点（starting point or
epoch）和计时频率（tick rate）。</p>
<p>一个简单的例子是Unix时间戳，我们可以将其视为一个起点为1970年1月1日，计时频率为
<span class="math inline">\(1\)</span> Hz（ <span
class="math inline">\(1\)</span> tick/s）的时钟。</p>
<p>C++11中提供了三种时钟，包括system_clock、steady_clock、high_resolution_clock.
这些时钟的now方法均会返回当前的时间点（time
point），即从起始点开始的tick数。</p>
<p><em>注意，这三个时钟都不会考虑闰秒，我们会暂时略过相关内容的讨论，在必要时我们会简要说明不考虑闰秒的原因</em></p>
<h4 id="system_clock">system_clock</h4>
<p>顾名思义，这是一个系统时钟，表示操作系统的实时时间。</p>
<p>需要注意的是，这个时钟的单调性是不被保证的。原因是显而易见的：用户或者系统可以在任何时候出于任何理由（夏令时调整、时区调整等）改变系统时间。因此它实际上表示了现实世界的时钟（wall
clock，墙上时钟），这个时钟很适合直接记录和计划与现实时间直接相关的任务。</p>
<p>需要注意的是，C++20以前的标准并没有具体规定system_clock的实现。但是，多数system_clock的实现都使用Unix时间。</p>
<p>不过，在C++20之后，system_clock的实现就被规定为Unix时间了。</p>
<p>另外，这是唯一一个可以和C风格的<code>std::time</code>的时间戳构成双射的时钟，因此<code>std::chrono</code>中提供了<code>to time_t</code>和<code>from time_t</code>两个方法。</p>
<h4 id="steady_clock">steady_clock</h4>
<p>这一时钟与system_clock最大的不同就是单调性。system_clock由于直接与现实时间相关联，因此单调性无法保证。但是steady_clock是一个稳定的时钟源，它的now方法返回的时间总是单调递增的，并且每个tick之间的时间差总是一个常数。</p>
<p>一个值得注意的地方是，这个时钟的计时起点是未指定的。</p>
<blockquote>
<p>This clock is not related to wall clock time (for example, it can be
time since last reboot), and is most suitable for measuring
intervals.</p>
<p align="right">
From
<a href="https://en.cppreference.com/w/cpp/chrono/steady_clock">std::chrono::steady_clock</a>
</p>
</blockquote>
<p>这样的设计是有意而为之的——这一时钟并不被设计在表示日历时间的场景中使用。如上方所说，这一时钟最合适的用途是用于测量时间间隔（作为定时器的时钟源）。</p>
<h4 id="high_resolution_clock">high_resolution_clock</h4>
<p>这一时钟是当前平台分辨率最高的时钟，其实际精度和分辨率一般取决于具体的平台。事实上，在大多数的实现中，这一时钟只是system_clock和steady_clock的别名——因此其单调性也几乎无法保证。</p>
<p>截至笔者完成本文的时间GCC的标准库libstdc++中high_resolution_clock是system_clock的别名，而MSVC的标准库中high_resolution_clock是steady_clock的别名，LLVM的标准库libc++对这一时钟的定义则是两者的复合体——在具有单调时钟时使用steady_clock，否则使用system_clock。</p>
<p>如果你的程序中使用了这个时钟并且有跨平台的需求，这将带来程序行为不一致的风险。</p>
<p>除非你认为非常有必要，否则我们建议减少对这个时钟的使用。</p>
<h4 id="为什么不讨论闰秒">为什么不讨论闰秒？</h4>
<p><strong>如果你不关心这个问题，你可以跳过这一段。</strong></p>
<p>在前面提到过，这样的设计是有意而为之。因为闰秒并不像我们所说的闰年一样，具有一个可计算的公式。</p>
<p>如果将地球自转一周的时间均分为86400份，将一份定义为一秒，我们就得到了秒的一种定义，根据这种秒的定义所得到的时间我们记为<strong>世界时UT1</strong>。</p>
<p>但是地球自转一周的时间是不稳定的，这一点不展开讨论，我们只需要知道它是客观存在的。因此，我们需要更稳定的秒的定义——铯-133原子基态的两个超精细结构能级之间跃迁相对应辐射周期的9192631770倍所持续的时间定义为一秒。由这种方法计量的时间我们记为<strong>原子时TAI</strong>。</p>
<p>世界时是符合人类直观，具有直接指导生产意义的时间，但是具有不稳定性。原子时稳定，但是由于地球自转的不稳定性，会与世界时形成不小的误差。</p>
<p>为了弥补这个误差，我们引入一种新的时间，也就是我们现在常用的时间——<strong>协调世界时UTC</strong>。</p>
<p>它以TAI为基础，为了避免误差累积，每当UTC和UT1的误差接近1秒时，就会插入闰秒以修补这个误差。但是插入的时间并不确定，事实上，它由对应的国际组织提前六个月发布处理。</p>
<p>作为一个编程语言，C++不具备预测人类活动或者地球自转快慢的能力，因此不考虑闰秒是一个正常的选择。这个问题被交给程序员来解决。</p>
<p><em>截至目前，由于插入闰秒的做法带来了很多破坏性的影响，已有提案声明要求取消闰秒。预计在2035年后，不再引入新的闰秒。</em></p>
<h3 id="时间点time_point">时间点（time_point)</h3>
<p>时间点的意义是自然的，它代表时间轴上的一个点。为了定义它，你需要提供一个时钟作为参考系，一个tick数标记这个<code>time_point</code>代表的点。一般的实现是作为一个特殊的<code>duration</code>，简单来说，它是一个起点固定的<code>duration</code>（固定为指定时钟的起始点）。因此，它的构造方法就是提供一个时钟，并且提供一个<code>duration</code>代表具体时钟起点的长度。</p>
<p><em>当然这不意味着这两个类具有继承关系。事实上，这是一种帮助理解的说法。</em></p>
<p>它的签名如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Clock</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Duration</span> = <span class="keyword">typename</span> Clock::duration</span><br><span class="line">&gt; <span class="keyword">class</span> time_point;</span><br></pre></td></tr></table></figure>
<p>一个简单的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::<span class="function">chrono::time_point&lt;std::chrono::system_clock&gt; </span></span><br><span class="line"><span class="function">    <span class="title">start</span><span class="params">(std::chrono::duration&lt;<span class="type">int</span>&gt;(<span class="number">10</span>))</span></span>;</span><br></pre></td></tr></table></figure>
<p>这段代码定义了一个名为<code>start</code>的时间点，标记了1970年1月1日0时0分10秒（Unix时间起点+10s）的时间点。</p>
<p>可以这样看，我们提供了<code>system_clock</code>作为模板参数，这代表着这个时间点以<code>system_clock</code>为参考系，我们传入一个长度为10s的<code>duration</code>表示我们需要标记system_clock纪元（epoch）10秒后的一个点。</p>
<p>当然，也有这样的定义方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::chrono::<span class="function">system_clock::time_point <span class="title">start</span><span class="params">(std::chrono::duration&lt;<span class="type">int</span>&gt;(<span class="number">10</span>))</span></span>;</span><br></pre></td></tr></table></figure>
<p>这两者是等价的。</p>
<p>因为<code>time_point</code>是特殊的<code>duration</code>，因此它也可以进行一些算术操作。</p>
<p>值得注意的是，由于<code>time_point</code>的实际含义是一个点，对一个点的数乘是无意义的，所以<code>time_point</code>并不能支持数乘运算。</p>
<p>其他的加减操作是符合直观的，概括地说：</p>
<ul>
<li>时间点和时间段相加减得到新的时间点。</li>
<li>时间点与时间点相减得到新的时间段。</li>
</ul>
<p>自然地，<code>time_point</code>也是可以进行单位转换的，只要类比<code>duration_cast</code>的用法，使用<code>time_point_cast</code>即可。</p>
<h2
id="简化的表示chrono_literals的使用">简化的表示——chrono_literals的使用</h2>
<p><code>chrono_literals</code>是<code>std::literals</code>的一个子命名空间，引入这个命名空间之后我们可以简化时间的表示。</p>
<p>一个例子是：我们可以用<code>10s</code>等价代替<code>std::chrono::seconds(10)</code>。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240127222748419.png"
alt="image-20240127222748419" />
<figcaption aria-hidden="true">image-20240127222748419</figcaption>
</figure>
<p>C++认为<code>10s</code>是一个字面量（literal），代表<code>std::chrono::seconds(10)</code>，正如一个不带后缀的字面量<code>10</code>代表一个int类型的整数10一样。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::literals::chrono_literals;</span><br><span class="line">std::chrono::<span class="function">system_clock::time_point <span class="title">start</span><span class="params">(<span class="number">10</span>s)</span></span>;</span><br></pre></td></tr></table></figure>
<p>于是，我们有了这样更加直观的写法。</p>
<h2 id="参考资料">参考资料</h2>
<p><a href="https://en.cppreference.com/w/cpp/chrono">Date and time
utilities - cppreference.com</a></p>
<p><a href="https://zh.wikipedia.org/wiki/闰秒">闰秒 -
维基百科，自由的百科全书 (wikipedia.org)</a></p>
]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>四舵轮底盘运动解算</title>
    <url>/2024/01/17/%E5%9B%9B%E8%88%B5%E8%BD%AE%E5%BA%95%E7%9B%98%E8%BF%90%E5%8A%A8%E8%A7%A3%E7%AE%97/</url>
    <content><![CDATA[<p>舵轮具备向任意方向产生速度的能力，因此舵轮底盘可以进行全向运动。</p>
<span id="more"></span>
<p>定义底盘坐标系如下，x为正前方，原点为底盘中心。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240117042607140.png"
alt="image-20240117042607140" />
<figcaption aria-hidden="true">image-20240117042607140</figcaption>
</figure>
<p>底盘的运动状态可以表示为 <span class="math display">\[
\boldsymbol{V}=\begin{bmatrix} \vec{v}&amp; \vec{\omega}\end{bmatrix}
\]</span> 其中<span class="math inline">\(v\)</span>表示底盘在<span
class="math inline">\(X-Y\)</span>平面的线速度，<span
class="math inline">\(\omega\)</span>表示底盘绕自身中心自转的角速度。</p>
<p>令<span
class="math inline">\(\theta=\arctan(\frac{l}{w})\)</span>，<span
class="math inline">\(\vec{r_i}\)</span>为车体中心指向轮子中心的向量，<span
class="math inline">\(|\vec{r_i}|=\frac{\sqrt{l^2+w^2}}{2}\)</span></p>
<p>我们将角速度<span
class="math inline">\(\omega\)</span>映射到四个轮子上，于是有 <span
class="math display">\[
\vec{v_{\omega i}}=\vec{\omega}\times
\vec{r_i}=|\vec\omega||\vec{r_i}|(\cos(\theta_i),sin(\theta_i))
\]</span> 其中 <span class="math display">\[
\begin{bmatrix}
\theta_1\\
\theta_2\\
\theta_3\\
\theta_4
\end{bmatrix}=
\begin{bmatrix}
\pi-\theta\\
\theta-\pi\\
-\theta\\
\theta
\end{bmatrix}
\]</span></p>
<p>将线速度<span
class="math inline">\(v\)</span>映射到四个轮子上，于是有 <span
class="math display">\[
\vec{v_{li}}=\vec{v}=\begin{bmatrix}v_x\\v_y\end{bmatrix}
\]</span> 把线速度的投影和角速度的投影相加，得到 <span
class="math display">\[
\vec{v_{i}}=\vec{v_{li}}+\vec{v_{\omega i}}
\]</span> 于是我们有 <span class="math display">\[
\vec{v_i}=\begin{bmatrix}
1 &amp; 0 &amp; |r|\cos(\theta_i)\\
0 &amp; 1 &amp; |r|\sin(\theta_i)
\end{bmatrix}
\begin{bmatrix}
v_x\\
v_y\\
\omega
\end{bmatrix}
\]</span></p>
<p>将所得的矢量的模作为舵轮的速度，矢量的方向作为舵轮的方向即可。</p>
]]></content>
      <tags>
        <tag>机器人运动学</tag>
      </tags>
  </entry>
  <entry>
    <title>《常轨脱离Creative》——天使降临我身边</title>
    <url>/2024/02/25/%E3%80%8A%E5%B8%B8%E8%BD%A8%E8%84%B1%E7%A6%BBCreative%E3%80%8B%E2%80%94%E2%80%94%E5%A4%A9%E4%BD%BF%E9%99%8D%E4%B8%B4%E6%88%91%E8%BA%AB%E8%BE%B9/</url>
    <content><![CDATA[<p>我对GalGame的接触不多，并不能算是圈子中的资深玩家——没有玩过几部经典的作品，仅有的游玩经验也只有《美少女万华镜》、《恋爱我就借走了》等一些比较有名的作品浅尝辄止的体验。</p>
<p>第一次听说《常轨脱离》是在知乎上的某个回答中，看到了一张妃爱的游戏CG。初看觉得非常惊艳，于是上网搜索了一会，最后在春节Steam打折时入了本作，并且开始了游玩。</p>
<p>既然是为了妃爱而来，自然首先选择了妃爱线。不过，在体验共通线的过程中，我却对娇小可爱的锦明日海产生了兴趣。于是在结束了妃爱线后，我头一次在GalGame中尝试了第二条线路——之前的游玩经验中，不知出于何种原因，我都只推了一条线就没有再玩了。凭借着自己的感觉，很成功地进入了锦明日海的个人线，充实地体验了剧情后，达成了结局”天使降临我身边“。<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225213231159.png"
alt="image-20240225213231159" /></p>
<p>可以说，本线的剧情很好地击穿了我内心的防波堤，也因此我提笔写下这篇文章，记录本人游玩的感想。</p>
<p>个人文笔比较差，请读者见谅。</p>
<span id="more"></span>
<p><strong><em>以下部分涉及剧透</em></strong></p>
<h2 id="个人线剧情梗概">个人线剧情梗概</h2>
<p>提笔之时，我已通关有些日子，多数剧情仅仅依赖自己的记忆，可能稍微有些不准确。</p>
<p>共通线主要的内容是莫名其妙被选为学生会长的和泉不得不集结了一批不上学的学生作为自己的学生会成员，并且经过一系列日常活动之后，逐步建立起良好的关系。</p>
<p>在经过了学生会一段时间的活动后，和泉智宏（以下称和泉，妹妹会用妃爱代替）已经和成员们建立了良好的关系。结束了志愿者合宿之后，家里蹲的和泉突然接到锦明日海（以下称明日海）的求助信息，几乎没有任何犹豫，他即刻动身前往明日海家。锦明日海的个人线由此开始。</p>
<p>到明日海家后，和泉得知是直播平台封禁了雪景四季（锦明日海的VTuber账号）的直播间，在联系运营之后尽管并不知道触犯了什么规则，但是得知需要一段时间才能解封。为了保障雪景四季的人气，和泉与明日海商讨决定要用视频的形式代替直播，作为直播间封禁期间的过渡活动。</p>
<p>除此之外，和泉还得知明日海收到V字势公司（以下简称V司）邀请。二人讨论后，认为如果有专业的公司运营和宣传渠道，不仅可以减少类似这次的封禁事件，也可以取得更多的资源。因此明日海决定与V司合作。</p>
<p>为了帮助明日海，这一段时间里和泉常常到明日海家中帮忙。在这一过程中，二人的感情迅速升温，最后以明日海的告白开始，二人正式成为恋人。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225214851024.png"
alt="忘了截图了，拿一张CG将就看一下" />
<figcaption
aria-hidden="true">忘了截图了，拿一张CG将就看一下</figcaption>
</figure>
<p>在接下来的相处中，明日海不断打开自己内心的防线，逐渐把自己的过去和盘托出。</p>
<p>明日海的父母均为有名的音乐家，在这种环境下出生的她爱上了歌唱，但是因为意外的受伤导致喉咙受损，需要休养一段时间，不能唱歌。由于她从小在音乐学校就读，不能唱歌意味着需要落下很多进度，而且也因为不能唱歌而遭人白眼。同龄人的目光刺激到了明日海，她为了证明自己而逞强，强行在喉咙未康复的情况下唱歌，反而导致进一步损伤，因此需要更长时间来治疗，这导致她不得不落下更多的进度。在老师同学和父母的压力下，明日海选择了退学，在休息了一段时间后，转到普通学校就读。</p>
<p>转到普通学校后，意外又发生了。在一次合唱活动的练习中，她一开口就不小心走音了，因此被同班的男同学嘲笑。自己最喜爱也最为之骄傲的唱歌遭遇了挫折，最终得到了他人的嘲笑。作为音乐家之女的她在歌唱上的屡次失败导致了明日海的彻底破防，因此不敢去上学，不再敢在大众面前以锦明日海的身份唱歌，成为了一个完全的家里蹲。</p>
<p>但是她仍然没有放弃对唱歌的喜爱，她没有勇气以锦明日海的身份唱歌，她选择自己作曲，使用虚拟歌姬的技术来代替她发声。出生于音乐之家的她自然有着极高的音乐天赋，她作的曲子取得了很大的成就。尽管如此，她仍然希望能够自己唱歌。于是，她委托常盘华乃为自己设计了雪景四季的身份，作为一名虚拟主播开始活动。</p>
<p>摆脱了音乐家之女锦明日海的身份带来的压力，加上网络为她戴上的面具”雪景四季“，她可以无忧无虑地唱歌了。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225222822800.png"
alt="雪景四季" />
<figcaption aria-hidden="true">雪景四季</figcaption>
</figure>
<p>当然，这只是逃避现实的一种权宜之计。</p>
<p>在学生会任期中的最后一项任务文化祭中，学生会需要拿出振奋人心的节目（共通线中镰仓埋的坑）。明日海为了帮助和泉，也希望以此为契机解决自己心中的阴影，提出让自己上台唱歌。囿于过去的阴影，明日海虽有犹豫，但是在和泉的鼓励下，也下定了决心。</p>
<p>好事总是成双成对。雪景四季的出道演出被V司安排在了VTB的一场盛会——V冲击波（什么b翻译）中进行，运营小姐告知演出时间在文化祭的表演后一天。这是很好的机会，和泉和明日海自然答应了下来。</p>
<p>在文化祭的最后的布置工作结束时，V司公告的雪景四季将在V冲击波进行首次亮相，但是公告的日期却并不是运营小姐当初告知的时间，而是文化祭表演的那一天。</p>
<p>运营小姐为自己的工作失误道歉，并且表示愿意为此负责。众人思索许久，在最终几乎要决定放弃文化祭表演而选择V冲击波时，和泉”奇迹般地“想到了一个方法通过远程直播实现明日海在文化祭表演的同时也进行V冲击波的演出——让明日海穿上特制的衣服，遮盖住身上的动捕传感器，通过网络远程传输动捕数据到V冲击波的会场进行表演。（有关中之人暴露的问题游戏中有提及，与主题关系不大，不过多赘述）</p>
<p>最终，锦明日海圆满完成了两场表演，实现了个人的成长与蜕变。</p>
<p>明日海在最终的表演中发表了自己的感想，呼应了游戏的主题”不上学“。事实上，所有的线最后都会有这样一段剧情，不过我个人认为，这一段明日海的自白是对主题的契合度是最自然和贴切的。</p>
<blockquote>
<p>”很高兴今天大家能这么热情！现在能站在这里，像这样和大家打着招呼，我很开心！“</p>
<p>”这次的曲子是我自己所作！“</p>
<p>”我原本是个家里蹲，但是有人告诉了我，偶尔出去转转也不是件坏事。“</p>
<p>”当我鼓起勇气踏出那一步之后，真的，感觉很不错。“</p>
<p>”所以，我想把自己这份感受，也传递给各位，将这份心情，承载在歌声上。“</p>
<p>”如果大家对听了我的歌之后，对外面的世界产生了兴趣，从而迈出了那一步，我会特别开心。“</p>
<p>”外面的世界，其实并不坏。“</p>
<p>”正是因为踏出了那一步，才有了现在的我自己。“</p>
<p>”十分荣幸，大家能来听我唱歌，再次感谢各位！“</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225225517881.png"
alt="image-20240225225517881" />
<figcaption aria-hidden="true">image-20240225225517881</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240225225718591.png"
alt="image-20240225225718591" />
<figcaption aria-hidden="true">image-20240225225718591</figcaption>
</figure>
<h2 id="个人感受">个人感受</h2>
<p>之后就是一些碎碎念了。</p>
<p>玩完明日海线，我感受到的应该是是淡淡的快乐和无尽的憧憬。</p>
<p>全线聚焦于明日海个人的成长，基本的矛盾在于因为各种压力而导致自己无法上台歌唱，尽管有雪景四季作为另一重身份让她在网络上活动，但是对于有音乐梦想的她来说，以锦明日海的身份上台歌唱才是她最期盼的，在和泉的鼓励下，明日海在文化祭上迈出了重要一步，最终实现了个人的成长。</p>
<p>当然，恋爱游戏自然要谈一谈恋爱了。</p>
<p>概括地说，这是一场纯粹又简单、一场普通又美好的恋爱。</p>
<p>本线的一个重要意象就是肉包。它象征着二人的感情，组织起了全线的剧情——肉包贯穿了他们的相识，相恋，相爱，甚至在我的幻想中即使到了二人白头偕老之时，他们依然会分着吃便利店的肉包。</p>
<p>比起妃爱线的背德和华乃线的刺激，明日海线更像是平淡的清水，因肉包而起的相遇，因学生会产生的羁绊，最后水到渠成，顺理成章地结为伴侣。和泉始终支持着明日海，克服种种困难，明日海摆脱心中的挂碍，成功在舞台上放声歌唱，二者的感情由此升华。</p>
<p>不过，这一条线也并非完美无缺。</p>
<p>从剧本来看，后期文化祭与V冲击波表演冲突的这一矛盾的设置并不算太优秀。</p>
<p>这一冲突的出现是合理的，为了避免情节的平铺直叙，明日海的成长中的阻碍不应只有过去的阴霾，也应该有现实的，眼前的障碍，否则紧张感没有现实的凭依，仅仅依赖对明日海的共情，并不能很好地调动玩家的情绪，运营小姐从合作之初就经常在小地方上失误，契合人物形象，也为这一冲突埋下了伏笔，对于这一点我是认可的。</p>
<p>但是这一冲突的设计却不好，其原因在于解决方法太过浅显了。这样的解决方案可行性太差了，以至于我实在无法认可。</p>
<p>当然，也许实现不可能也算得上是一种常轨脱离吧。</p>
<p>总的来说，从剧情的角度，满分10分，我愿意为这一条线打9分。</p>
<p><strong>从涩涩的角度来说，我给2147483647分！锦小姐真是太可爱了！</strong></p>
]]></content>
      <tags>
        <tag>GalGame</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++混合编程与函数重载</title>
    <url>/2024/04/23/C-C-%E6%B7%B7%E5%90%88%E7%BC%96%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<p>C++相比于C，额外支持了函数重载。</p>
<p>为了更好地进行C/C++混合编程，具体地理解这一机制是必要的。</p>
<p>考察一个经典的C++程序编译过程，一般来说，这可以被分为四个过程：预编译、编译、汇编、链接。</p>
<p>函数重载的相关过程主要发生在编译期。</p>
<span id="more"></span>
<h3 id="编译期重载决议与名称修饰">编译期：重载决议与名称修饰</h3>
<p>除了常规的词法分析等工作，C++在编译期还有一项额外的工作：重载决议。</p>
<p>重载决议的含义是显而易见的：在所有同名的函数实现中，选择匹配最佳的一个作为实际调用的函数。</p>
<p>这个过程中的匹配规则是涉及到相当多的规则，对此的讨论可以单开一篇文章，这里不过多涉及</p>
<p><em>事实上，重载决议的匹配规则设计相当优秀，以至于多数情况下你不需要了解其具体机制也足以让其按照你的设想工作。</em></p>
<p>也就是说，程序在涉及到重载的部分实际调用的程序，在编译阶段已经被确定。</p>
<p>注意到这样一个事实：编译器会为所有被定义的标识符（函数、变量）生成实际的符号名称。</p>
<p>但是重载函数的集合实际上具有相同的名称，为了区分这些函数，C编译器和C++编译器具有不同的行为。</p>
<p>具体地，对于C编译器来说，所有标识符的实际符号名称往往与标识符本身的名称（函数名、变量名）相同（大多数情况下如此，即使有例外，名称也会非常接近）；对于C++编译器，所有标识符的实际符号名称除了会携带标识符本身的名称之外，还会带有其他的信息，比如参数类型、命名空间等。</p>
<p>简单来说，对于<code>int add(int a,int b)</code>这样一个函数签名，你可以认为C编译器生成的符号是<code>add()</code>，C++编译器生成的符号是<code>add(int,int)</code>。</p>
<p>实际情况由于涉及模板、类等问题，会比这个复杂很多。只需要理解一点，C++为每一个函数都生成了独一无二的标识符，同名函数的不同重载形式会被映射到到不同的符号名称上。</p>
<p>看似同名的函数，其实在编译器眼中并不相同。</p>
<p><strong>综上所述，我们可以做出这样的总结：编译器为函数的所有重载形式生成不同的符号名称；对于一个函数调用，编译器根据匹配规则决定其实际调用的函数实现，并将原本的函数名转换为对应的符号名称。</strong></p>
<h3 id="链接期符号解析">链接期：符号解析</h3>
<p>在代码中使用函数、变量被称为一次引用。为了处理这些引用，这些引用在编译期被替换为符号名称，链接器需要将它们与实际的实现关联起来，这一过程被称为链接。链接的规则是复杂的，但是我们可以先避开复杂的细节，基于下面的假设展开讨论：</p>
<ul>
<li>同名的符号会被关联到具体的实现上；</li>
<li>同名的符号仅有唯一的实现；</li>
</ul>
<p>这两条假设在大多数情况下是正确且直观的，这对于我们理解函数重载的过程已经很足够了。</p>
<p>事实上，这两条假设保证了链接器选择的唯一性。</p>
<p>我们逐一讨论每一条假设的意义：</p>
<ul>
<li>假设所有同名的符号不存在一份实现，则会有”undefined
reference“错误，即所谓未定义的引用；</li>
<li>假设同名的符号具有两份相同的实现，则会有”multiple
definition“（链接期）或者”redefinition“（编译期）</li>
</ul>
<p>注意到这样一个事实，源代码中同名的函数实际上已经在经过名称修饰后不再同名。所以，每一个函数实际上都具有独一无二的符号名称。可以认为，在链接期时不应该存在同名的符号了。</p>
<h3 id="实践指导">实践指导</h3>
<p>C++为了保持语言兼容性，提供了额外的关键字<code>extern "C"&#123; /** some code here **/ &#125;</code>，在这个代码块中所有标识符（函数、变量）的声明都会被按照C的方式被处理，不做任何修饰（所谓按照C的方式被声明）。于是，C的代码也可以正常调用这部分标识符。</p>
<p><strong>这意味着，在你的C++代码中，所有暴露给C语言调用的接口应该被包含于<code>extern "C"</code>中。</strong></p>
<p><strong>对于使用C语言开发的库，如果需要被C++调用，那么在C++代码中就需要被以C的方式声明。</strong></p>
<p>为了支持这一点实际上并不难，开发者完全可以利用宏来解决这一点。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _A_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _A_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __cplusplus__ */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* some code here */</span></span><br><span class="line">&#125; A;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">bar</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __cplusplus__ */</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* _A_H */</span></span></span><br></pre></td></tr></table></figure>
<p>我们在一个经典的头文件中加入了<code>__cplusplus</code>控制编译的<code>extern "C"</code>块。</p>
<p>需要知道这样一个事实——C++源文件会在自己的文件中隐式地定义一个宏<code>__cplusplus</code>。也就是说，当这份头文件被C++源文件包含时，<code>extern "C"</code>就会被加入头文件中参与编译。</p>
<p>我们可以考察如果没有<code>extern "C"</code>会产生什么后果：</p>
<p>假设我们有一个库A，有两个文件：<code>A.h</code>和<code>A.c</code>。.h头文件中含有库A中的函数声明和一些类型定义，.c中有这些函数的实现。注意，源文件是.c格式的，这里所有的符号都不会经过名称修饰，例如<code>foo</code>的符号应该就是<code>foo</code>。</p>
<p>现在，我们写了一份<code>main.cpp</code>文件，其中包含了<code>A.h</code>，于是<code>A.h</code>中声明的所有符号都会经过名称修饰。</p>
<p>不妨假设<code>main.cpp</code>调用了<code>foo(1)</code>，那么经过名称修饰后，其符号可以认为是<code>foo(int)</code>。</p>
<p>于是链接器会去寻找<code>foo(int)</code>的实现，关联到<code>main.cpp</code>上，但是由于<code>A.c</code>是按照C格式被编译，其中的实现所有的符号都没有经过修饰，那么链接器就无法寻找到<code>foo(int)</code>——因为实际上它的实现的符号是<code>foo</code>。这就是链接器报错<code>undefined reference</code>的原因之一。</p>
<p>所以，在C实现的库的头文件中加入<code>extern "C"</code>块往往是必要的。</p>
<p><strong><code>extern "C"</code>是C++关键字，纯C环境中不存在这个关键字，因此需要被包含于条件编译块中。</strong></p>
<p>除此之外，对于嵌入式平台来说，如我们常用的STM32，它提供了启动时的<code>statup.s</code>，用汇编描述了启动流程，做了必要的初始化，引用函数构成向量表，如复位处理、硬错误处理、中断服务函数等。它负责将这些函数放到一个正确的地址上，以便MCU自动调用这些函数。</p>
<p><strong>因此，这些函数也应该确保将被按照以C方式被声明。你可以简单地认为，<code>startup.s</code>中的所有引用的函数都应该被按照C的方式被声明。</strong></p>
<p>以下给出了F405的向量表的一部分，具体可以参考CubeMX自动生成的startup.s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g_pfnVectors:</span><br><span class="line">  .word  _estack</span><br><span class="line">  .word  Reset_Handler</span><br><span class="line"></span><br><span class="line">  .word  NMI_Handler</span><br><span class="line">  .word  HardFault_Handler</span><br><span class="line">  .word  MemManage_Handler</span><br><span class="line">  .word  BusFault_Handler</span><br><span class="line">  .word  UsageFault_Handler</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  0</span><br><span class="line">  .word  SVC_Handler</span><br><span class="line">  .word  DebugMon_Handler</span><br><span class="line">  .word  0</span><br><span class="line">  .word  PendSV_Handler</span><br><span class="line">  .word  SysTick_Handler</span><br><span class="line">  </span><br><span class="line">  /* External Interrupts */</span><br><span class="line">  .word     WWDG_IRQHandler                   /* Window WatchDog              */                                        </span><br><span class="line">  .word     PVD_IRQHandler                    /* PVD through EXTI Line detection */                        </span><br><span class="line">  .word     TAMP_STAMP_IRQHandler             /* Tamper and TimeStamps through the EXTI line */            </span><br><span class="line">  .word     RTC_WKUP_IRQHandler               /* RTC Wakeup through the EXTI line */                      </span><br><span class="line">  .word     FLASH_IRQHandler                  /* FLASH                        */                                          </span><br><span class="line">  .word     RCC_IRQHandler                    /* RCC                          */                                            </span><br><span class="line">  .word     EXTI0_IRQHandler                  /* EXTI Line0                   */                        </span><br><span class="line">  .word     EXTI1_IRQHandler                  /* EXTI Line1                   */                          </span><br><span class="line">  .word     EXTI2_IRQHandler                  /* EXTI Line2                   */                          </span><br><span class="line">  .word     EXTI3_IRQHandler                  /* EXTI Line3                   */                          </span><br><span class="line">  .word     EXTI4_IRQHandler                  /* EXTI Line4                   */                          </span><br><span class="line">  .word     DMA1_Stream0_IRQHandler           /* DMA1 Stream 0                */                  </span><br><span class="line">  .word     DMA1_Stream1_IRQHandler           /* DMA1 Stream 1                */                   </span><br><span class="line">  .word     DMA1_Stream2_IRQHandler           /* DMA1 Stream 2                */                   </span><br><span class="line">  .word     DMA1_Stream3_IRQHandler           /* DMA1 Stream 3                */                   </span><br><span class="line">  .word     DMA1_Stream4_IRQHandler           /* DMA1 Stream 4                */                   </span><br><span class="line">  .word     DMA1_Stream5_IRQHandler           /* DMA1 Stream 5                */                   </span><br><span class="line">  .word     DMA1_Stream6_IRQHandler           /* DMA1 Stream 6                */                   </span><br><span class="line">  .word     ADC_IRQHandler                    /* ADC1, ADC2 and ADC3s         */                   </span><br><span class="line">  .word     CAN1_TX_IRQHandler                /* CAN1 TX                      */                         </span><br><span class="line">  .word     CAN1_RX0_IRQHandler               /* CAN1 RX0                     */                          </span><br><span class="line">  .word     CAN1_RX1_IRQHandler               /* CAN1 RX1                     */                          </span><br><span class="line">  .word     CAN1_SCE_IRQHandler               /* CAN1 SCE                     */                          </span><br><span class="line">  .word     EXTI9_5_IRQHandler                /* External Line[9:5]s          */                          </span><br><span class="line">  .word     TIM1_BRK_TIM9_IRQHandler          /* TIM1 Break and TIM9          */         </span><br><span class="line">  .word     TIM1_UP_TIM10_IRQHandler          /* TIM1 Update and TIM10        */         </span><br><span class="line">  .word     TIM1_TRG_COM_TIM11_IRQHandler     /* TIM1 Trigger and Commutation and TIM11 */</span><br><span class="line">  .word     TIM1_CC_IRQHandler                /* TIM1 Capture Compare         */                          </span><br><span class="line">  .word     TIM2_IRQHandler                   /* TIM2                         */                   </span><br><span class="line">  .word     TIM3_IRQHandler                   /* TIM3                         */                   </span><br><span class="line">  .word     TIM4_IRQHandler                   /* TIM4                         */                   </span><br><span class="line">  .word     I2C1_EV_IRQHandler                /* I2C1 Event                   */                          </span><br><span class="line">  .word     I2C1_ER_IRQHandler                /* I2C1 Error                   */                          </span><br><span class="line">  .word     I2C2_EV_IRQHandler                /* I2C2 Event                   */                          </span><br><span class="line">  .word     I2C2_ER_IRQHandler                /* I2C2 Error                   */                            </span><br><span class="line">  .word     SPI1_IRQHandler                   /* SPI1                         */                   </span><br><span class="line">  .word     SPI2_IRQHandler                   /* SPI2                         */                   </span><br><span class="line">  .word     USART1_IRQHandler                 /* USART1                       */                   </span><br><span class="line">  .word     USART2_IRQHandler                 /* USART2                       */                   </span><br><span class="line">  .word     USART3_IRQHandler                 /* USART3                       */                   </span><br><span class="line">  .word     EXTI15_10_IRQHandler              /* External Line[15:10]s        */                          </span><br><span class="line">  .word     RTC_Alarm_IRQHandler              /* RTC Alarm (A and B) through EXTI Line */                 </span><br><span class="line">  .word     OTG_FS_WKUP_IRQHandler            /* USB OTG FS Wakeup through EXTI line */                       </span><br><span class="line">  .word     TIM8_BRK_TIM12_IRQHandler         /* TIM8 Break and TIM12         */         </span><br><span class="line">  .word     TIM8_UP_TIM13_IRQHandler          /* TIM8 Update and TIM13        */         </span><br><span class="line">  .word     TIM8_TRG_COM_TIM14_IRQHandler     /* TIM8 Trigger and Commutation and TIM14 */</span><br><span class="line">  .word     TIM8_CC_IRQHandler                /* TIM8 Capture Compare         */                          </span><br><span class="line">  .word     DMA1_Stream7_IRQHandler           /* DMA1 Stream7                 */                          </span><br><span class="line">  .word     FSMC_IRQHandler                   /* FSMC                         */                   </span><br><span class="line">  .word     SDIO_IRQHandler                   /* SDIO                         */                   </span><br><span class="line">  .word     TIM5_IRQHandler                   /* TIM5                         */                   </span><br><span class="line">  .word     SPI3_IRQHandler                   /* SPI3                         */                   </span><br><span class="line">  .word     UART4_IRQHandler                  /* UART4                        */                   </span><br><span class="line">  .word     UART5_IRQHandler                  /* UART5                        */                   </span><br><span class="line">  .word     TIM6_DAC_IRQHandler               /* TIM6 and DAC1&amp;2 underrun errors */                   </span><br><span class="line">  .word     TIM7_IRQHandler                   /* TIM7                         */</span><br><span class="line">  .word     DMA2_Stream0_IRQHandler           /* DMA2 Stream 0                */                   </span><br><span class="line">  .word     DMA2_Stream1_IRQHandler           /* DMA2 Stream 1                */                   </span><br><span class="line">  .word     DMA2_Stream2_IRQHandler           /* DMA2 Stream 2                */                   </span><br><span class="line">  .word     DMA2_Stream3_IRQHandler           /* DMA2 Stream 3                */                   </span><br><span class="line">  .word     DMA2_Stream4_IRQHandler           /* DMA2 Stream 4                */                   </span><br><span class="line">  .word     0                                 /* Reserved                     */                   </span><br><span class="line">  .word     0                                 /* Reserved                     */                     </span><br><span class="line">  .word     CAN2_TX_IRQHandler                /* CAN2 TX                      */                          </span><br><span class="line">  .word     CAN2_RX0_IRQHandler               /* CAN2 RX0                     */                          </span><br><span class="line">  .word     CAN2_RX1_IRQHandler               /* CAN2 RX1                     */                          </span><br><span class="line">  .word     CAN2_SCE_IRQHandler               /* CAN2 SCE                     */                          </span><br><span class="line">  .word     OTG_FS_IRQHandler                 /* USB OTG FS                   */                   </span><br><span class="line">  .word     DMA2_Stream5_IRQHandler           /* DMA2 Stream 5                */                   </span><br><span class="line">  .word     DMA2_Stream6_IRQHandler           /* DMA2 Stream 6                */                   </span><br><span class="line">  .word     DMA2_Stream7_IRQHandler           /* DMA2 Stream 7                */                   </span><br><span class="line">  .word     USART6_IRQHandler                 /* USART6                       */                    </span><br><span class="line">  .word     I2C3_EV_IRQHandler                /* I2C3 event                   */                          </span><br><span class="line">  .word     I2C3_ER_IRQHandler                /* I2C3 error                   */                          </span><br><span class="line">  .word     OTG_HS_EP1_OUT_IRQHandler         /* USB OTG HS End Point 1 Out   */                   </span><br><span class="line">  .word     OTG_HS_EP1_IN_IRQHandler          /* USB OTG HS End Point 1 In    */                   </span><br><span class="line">  .word     OTG_HS_WKUP_IRQHandler            /* USB OTG HS Wakeup through EXTI */                         </span><br><span class="line">  .word     OTG_HS_IRQHandler                 /* USB OTG HS                   */                   </span><br><span class="line">  .word     0                                 /* Reserved                         */                   </span><br><span class="line">  .word     0                                 /* Reserved                  */                   </span><br><span class="line">  .word     HASH_RNG_IRQHandler               /* Hash and Rng                 */</span><br><span class="line">  .word     FPU_IRQHandler                    /* FPU                          */</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenOCD简明指南</title>
    <url>/2024/07/28/OpenOCD%E7%AE%80%E6%98%8E%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>OpenOCD（Open On Chip
Debugger）是一个开源的嵌入式调试软件，支持多种SoC、FPGA、CPLD和调试器等，提供了一个优秀的抽象层，使得用户可以通过几乎一致的操作对嵌入式工程进行调试。</p>
<p>本指南仅涉及嵌入式SoC的烧录与调试操作。</p>
<p>有关FPGA和CPLD的使用笔者暂未探索。</p>
<span id="more"></span>
<h2 id="openocd-cli-options">OpenOCD CLI Options</h2>
<p>这里仅介绍常用的若干命令选项</p>
<ul>
<li><p><strong><code>-f</code> 或
<code>--file &lt;filename&gt;</code></strong>:</p>
<ul>
<li><p>指定配置文件。配置文件定义了目标设备、接口和调试器的设置。</p></li>
<li><p>示例：<code>openocd -f board/stm32f4discovery.cfg</code></p></li>
</ul></li>
<li><p><strong><code>-c</code> 或
<code>--command &lt;cmd&gt;</code></strong>:</p>
<ul>
<li><p>执行指定的命令，然后退出。可以用于执行一系列脚本命令。</p></li>
<li><p>示例：<code>openocd -c "init; reset halt; exit"</code></p></li>
</ul></li>
<li><p><strong><code>-d</code> 或
<code>--debug &lt;level&gt;</code></strong>:</p>
<ul>
<li><p>设置调试输出级别。级别从0（无调试信息）到3（详细调试信息）。</p></li>
<li><p>示例：<code>openocd -d 3</code></p></li>
</ul></li>
<li><p><strong><code>-s</code> 或
<code>--search &lt;dir&gt;</code></strong>:</p>
<ul>
<li><p>添加脚本搜索路径。</p></li>
<li><p>示例：<code>openocd -s /path/to/scripts</code></p></li>
</ul></li>
<li><p><strong><code>--telnet_port &lt;port&gt;</code></strong>:</p>
<ul>
<li>指定Telnet服务器端口，用于调试会话。</li>
<li>示例：<code>openocd --telnet_port 4444</code></li>
</ul></li>
<li><p><strong><code>--gdb_port &lt;port&gt;</code></strong>:</p>
<ul>
<li>指定GDB服务器端口，用于连接GDB调试器。</li>
<li>示例：<code>openocd --gdb_port 3333</code></li>
</ul></li>
<li><p><strong><code>--tcl_port &lt;port&gt;</code></strong>:</p>
<ul>
<li>指定TCL服务器端口，用于脚本控制。</li>
<li>示例：<code>openocd --tcl_port 6666</code></li>
</ul></li>
</ul>
<p>把端口指定为disabled将禁用对应服务器。</p>
<h2 id="openocd-config">OpenOCD Config</h2>
<p>在使用OpenOCD对进行编程调试时，需要提供若干cfg文件用于提供信息：</p>
<ul>
<li>interface：调试器接口，如ST-Link等；</li>
<li>board：开发板，如ST-Nucleo系列的开发板等；</li>
<li>target：嵌入式SoC，如STM32F4等；</li>
</ul>
<p>interface指明了使用的调试器硬件，target指明了待调试的目标SoC。</p>
<p>特定的board有确定的target和interface，所以board内部一般会直接引用interface和target。</p>
<p>北邮机器人队内部常用两种调试器ST-Link和正点原子DAP-Link和STM32F4系列的MCU，因此有两种典型的配置：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># stm32f4 with cmsis-dap</span></span><br><span class="line"><span class="keyword">source</span> [find interface/cmsis-dap.cfg]</span><br><span class="line"><span class="keyword">source</span> [find target/stm32f4x.cfg]</span><br><span class="line">reset_config none</span><br></pre></td></tr></table></figure>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># stm32f4 with st-link</span></span><br><span class="line"><span class="keyword">source</span> [find interface/stlink.cfg]</span><br><span class="line"><span class="keyword">source</span> [find target/stm32f4x.cfg]</span><br><span class="line">reset_config none</span><br></pre></td></tr></table></figure>
<ul>
<li><code>source &lt;config file&gt;</code>指的是引入指定的配置文件。</li>
<li><code>find &lt;path&gt;</code>指的是在特定位置（如OpenOCD的安装目录）搜索指定的配置文件。</li>
<li><code>reset_config</code>指的是OpenOCD复位指令的行为，常用的选项如下：
<ul>
<li><code>srst_only</code>：仅系统复位，有JTAG门控</li>
<li><code>srst_nogate</code>：仅系统复位，无JTAG门控</li>
<li><code>none</code>：默认配置，一般来说用这个就好</li>
</ul></li>
</ul>
<h2 id="openocd-server">OpenOCD Server</h2>
<p>OpenOCD启动后会运行三种服务：</p>
<ul>
<li>GDB：默认运行在3333端口，GDB调试服务；</li>
<li>TCL：默认运行在6666端口，TCL脚本服务；</li>
<li>Telnet：默认运行在4444端口，Telnet服务；</li>
</ul>
<p>GDB服务用于接入GDB，在GDB中输入<code>target remote :&lt;port&gt;</code>即可接入调试；</p>
<p>Telnet服务可以通过Telnet客户端登录，通过手动输入指令的方式进行调试；</p>
<p>TCL服务可以通过Socket连接，执行复杂的TCL脚本进行自动化调试；</p>
<h2 id="openocd-command">OpenOCD Command</h2>
<p>OpenOCD指令众多，官方文档<span class="exturl" data-url="aHR0cHM6Ly9vcGVub2NkLm9yZy9wYWdlcy9kb2N1bWVudGF0aW9uLmh0bWw=">Documentation
(openocd.org)<i class="fa fa-external-link-alt"></i></span>有详细的介绍，由于一般使用GDB进行调试，这里不过多介绍其他指令，仅介绍一些常用的指令：</p>
<h3 id="program">Program</h3>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">program &lt;<span class="keyword">filename</span>&gt; [verify] [reset] [<span class="keyword">exit</span>] [file_offset] [mem_offset] [bank]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>&lt;filename&gt;</code></strong>:
<ul>
<li>要编程的文件的路径，可以是二进制文件（*.bin）、Intel HEX
文件（*.hex）或 ELF 文件（*.elf）。</li>
<li>bin文件是纯粹的二进制数据，不包含任何包括地址信息在内的其他数据，烧录时必须指定内存偏移；</li>
<li>hex文件是文本文件，包含十六进制编码的数据和地址信息，可以直接烧录；</li>
<li>elf文件是标准的二进制文件，除了数据及其地址之外，还包含了符号表、调试信息等完整的元数据，可以直接烧录；</li>
</ul></li>
<li><strong><code>verify</code></strong>（可选）:
<ul>
<li>编程后进行校验，确保数据正确写入。</li>
</ul></li>
<li><strong><code>reset</code></strong>（可选）:
<ul>
<li>编程完成后复位目标设备。</li>
</ul></li>
<li><strong><code>exit</code></strong>（可选）:
<ul>
<li>编程完成后退出 OpenOCD。</li>
</ul></li>
<li><strong><code>file_offset</code></strong>（可选）:
<ul>
<li>文件中数据的偏移量，通常用于将部分文件编程到设备。</li>
<li>指定文件偏移时，必须同时指定内存偏移；</li>
</ul></li>
<li><strong><code>mem_offset</code></strong>（可选）:
<ul>
<li>目标设备内存中的偏移地址，指定数据写入的位置。</li>
<li>仅指定一个地址时，该地址被视为内存偏移；</li>
</ul></li>
<li><strong><code>bank</code></strong>（可选）:
<ul>
<li>指定 Flash 存储器的Bank，当设备具有多个 Flash bank 时使用。</li>
</ul></li>
</ul>
<p><strong>实例：</strong></p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">program firmware.elf verify reset <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<p>烧录firmware.elf，校验并重置目标SoC，完成后退出OpenOCD。</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">program firmware.bin <span class="number">0x08000000</span> verify reset <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>
<p>烧录firmware.bin，从地址0x08000000开始烧录，校验并重置目标SoC，完成后退出OpenOCD</p>
<h3 id="reset指令">Reset指令</h3>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">reset [run|halt|init|deassert|assert|none]</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong><code>run</code></strong>:</p>
<ul>
<li><p>复位目标设备并立即让它运行。这是默认的复位行为。</p></li>
<li><p>使用场景：通常用于将设备复位到初始状态并继续运行，例如在固件更新后让设备开始执行新的固件。</p></li>
</ul></li>
<li><p><strong><code>halt</code></strong>:</p>
<ul>
<li><p>复位目标设备并让它在复位后保持暂停状态。</p></li>
<li><p>使用场景：在调试时常用，以确保设备在已知状态下暂停，便于检查初始化状态或设置断点。</p></li>
</ul></li>
<li><p><strong><code>init</code></strong>:</p>
<ul>
<li><p>复位目标设备，并在复位后执行初始化步骤。</p></li>
<li><p>使用场景：在需要重新初始化调试器和设备状态时使用，确保设备从复位后的已知状态开始。</p></li>
</ul></li>
<li><p><strong><code>deassert</code></strong>:</p>
<ul>
<li><p>取消复位信号，将目标设备从复位状态释放。</p></li>
<li><p>使用场景：在需要手动控制复位信号的复杂调试场景中使用。</p></li>
</ul></li>
<li><p><strong><code>assert</code></strong>:</p>
<ul>
<li><p>断言复位信号，使目标设备进入复位状态。</p></li>
<li><p>使用场景：在需要手动控制复位信号的复杂调试场景中使用。</p></li>
</ul></li>
<li><p><strong><code>none</code></strong>:</p>
<ul>
<li><p>不进行任何复位操作，通常与 <code>reset_config</code>
配置配合使用。</p></li>
<li><p>使用场景：当复位行为已通过其他方式配置时使用。</p></li>
</ul></li>
</ul>
<p><strong>实例</strong></p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">reset run</span><br></pre></td></tr></table></figure>
<p>复位目标SoC，使之开始运行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reset halt</span><br></pre></td></tr></table></figure>
<p>复位目标SoC，暂停于复位向量处；</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">reset init</span><br></pre></td></tr></table></figure>
<p>复位目标SoC，执行到某个被指定的位置（完成初始化），相当于保证设备处于已初始化的稳定态；</p>
<h2 id="实践指导">实践指导</h2>
<h3 id="烧录">烧录</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openocd -f &lt;config-file&gt; -c <span class="string">&#x27;program &lt;firware-file&gt; verify reset exit&#x27;</span> </span><br></pre></td></tr></table></figure>
<h3 id="调试">调试</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">openocd -f &lt;config-file&gt; -c <span class="string">&#x27;program &lt;firware-file&gt; verify reset&#x27;</span> -c <span class="string">&#x27;init; reset init;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>program指令是可选的，但是笔者认为一般还是重新烧录比较稳妥（以防忘记烧录新固件）；</p></li>
<li><p>init指令和reset指令是可选的，但是执行一次复位之后可以确保设备与调试器均处于稳定态；</p></li>
<li><p>可以通过指令指定服务器端口，参考第一节；</p></li>
</ul>
<p>此后，启用调试有三种方法：</p>
<ul>
<li>使用telnet连接openocd</li>
<li>连接tcl服务器执行tcl脚本</li>
<li>使用gdb，连接远程目标到openocd的gdbserver</li>
</ul>
]]></content>
      <tags>
        <tag>嵌入式开发</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenOCD-Tools使用文档</title>
    <url>/2024/07/28/OpenOCD-Tools%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>OpenOCD
Tools是一个将OpenOCD与VSCode集成的小型插件，封装了OpenOCD的烧录和调试操作。</p>
<p>6.11版本之后的CubeMX引入了对CMake的原生支持，可以直接通过CubeMX直接配置生成CMake工程。</p>
<p>当前版本该插件仅支持类STM32 MCU的CMake工程。</p>
<p>功能特性：</p>
<ul>
<li>一键烧录调试固件</li>
<li>自动扫描固件文件</li>
<li>自动识别MCU，根据选择的调试器生成OpenOCD Config文件</li>
</ul>
<p><strong>如有更多的功能需求，请在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL25hbmpvNzEyL29wZW5vY2QtdG9vbHM=">代码仓库<i class="fa fa-external-link-alt"></i></span>中发起Issue。</strong></p>
<span id="more"></span>
<h2 id="依赖">依赖</h2>
<p>CMake
Tools：为了确保烧录前固件是最新版本，需要调用CMake进行编译。</p>
<h2 id="界面介绍">界面介绍</h2>
<p>打开一个STM32CubeMX配置的CMake工程，将激活拓展。</p>
<figure>
<img
src="https://raw.githubusercontent.com/nanjo712/PicGoRepo/master/image-20240728211919585.png"
alt="VSCode-侧边栏" />
<figcaption aria-hidden="true">VSCode-侧边栏</figcaption>
</figure>
<ul>
<li>MCU-Family：从IOC文件中读取的MCU族；</li>
<li>Debugger：选择一个Debugger，目前仅有三个选项stlink、cmsis-dap（dap-link）、jlink；</li>
<li>CFG
File：OpenOCD的配置文件，可以选择自己编写的配置文件，也可以根据MCU-Family和Debugger的设置自动生成；</li>
<li>Target
File：待烧录的固件文件，目前仅支持ELF文件烧录，可以通过CMake构建生成；</li>
<li>SVD
File：描述MCU外设寄存器地址的文件，一般由MCU厂商提供，STM32的SVD文件与CubeProgrammer打包分发。该配置项目可选，未配置该项则会在无外设视图的情况下启动调试；</li>
<li>Flash：烧录固件；</li>
<li>Debug：调试固件；</li>
</ul>
<h2 id="使用流程">使用流程</h2>
<ul>
<li>打开STM32工程，插件自动检测MCU；</li>
<li>选择使用的调试器，如stlink；</li>
<li>点击生成CFG文件，在工作区目录下将生成一个openocd.cfg文件；如果需要自定义，可以自行更改该文件，或者点击CFG
file选项选择一个CFG文件；</li>
<li>选择目标文件，点击之后插件将扫描目录内所有ELF文件，选择需要烧录或者调试的固件；</li>
<li>点击Flash进行烧录，或者点击Debug进行调试</li>
</ul>
<h2 id="更好的调试支持">更好的调试支持</h2>
<p>以下插件可以带来更好的调试体验，用户可以根据需要任意选择，与OpenOCD
Tools一起使用。</p>
<ul>
<li>Embedded Tools拓展：RTOS视图和外设试图</li>
<li>RTOS Views：RTOS视图</li>
<li>Peripheral Viewer：外设视图</li>
</ul>
]]></content>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
</search>
